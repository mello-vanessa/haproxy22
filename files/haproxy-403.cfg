global
	log 127.0.0.1	local2 
	chroot /var/lib/haproxy
#	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats socket :9999 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend server
        mode http       
	bind :80
	bind :443 ssl crt /etc/haproxy/certs/
	# Use General Purpose Couter (gpc) 0 in SC1 as a global abuse counter
	# Monitors the number of request sent by an IP over a period of 5 seconds
	stick-table type ip size 1m expire 10s store gpc0,http_req_rate(5s)
	tcp-request connection track-sc1 src
	# refuses a new connection from an abuser
	tcp-request content reject if { src_get_gpc0 gt 0 }
	# returns a 403 for requests in an established connection
	http-request deny if { src_get_gpc0 gt 0 }
	http-request redirect scheme https unless { ssl_fc }	
	default_backend vanessa

backend vanessa
    balance roundrobin
    # If the source IP sent 10 or more http request over the defined period,
    # flag the IP as abuser on the frontend
    acl abuse src_http_req_rate(server) ge 5
    acl flag_abuser src_inc_gpc0(server) ge 0
    # Returns a 403 to the abuser
    http-request deny if abuse flag_abuser
    server node1 10.0.1.246:80 check
    server node2 10.0.1.38:80 check

global
	log 127.0.0.1	local2
	chroot /var/lib/haproxy
	stats socket :9999 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
	## Slowloris attacks ##
	timeout http-request 5s
	#########################
	option http-buffer-request
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 423 /etc/haproxy/errors/408.http
	errorfile 429 /etc/haproxy/errors/408.http	
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend server
    mode http
	bind :80
	bind :443 ssl crt /etc/haproxy/certs/
	stats enable
    stats uri /stats
    stats refresh 10s
    # 425 - 423 per host
    stick-table  type binary  len 20  size 100k  expire 10s  store http_req_rate(10s)

    # Track client by base32+src (Host header + URL path + src IP)
    http-request track-sc0 base32+src
    # Check map file to get rate limit for path
    http-request set-var(req.rate_limit)  path,map_beg(/etc/haproxy/rates.map,20)
    # Client's request rate is tracked
    http-request set-var(req.request_rate)  base32+src,table_http_req_rate()
    # Subtract the current request rate from the limit
    # If less than zero, set rate_abuse to true
    acl rate_abuse var(req.rate_limit),sub(req.request_rate) lt 0   
    # Deny if rate abuse
    http-request deny deny_status 425 if rate_abuse

	#### Tracking a client by adding an http-request track-sc0 directive #####
	http-request track-sc0 src table vanessa
	# 10 requests per second, cap requests at 10 per second, set the limit to 100.
	# http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }
	# Diminuir quantidade para testes 
	http-request deny deny_status 429 if { sc_http_req_rate(0) gt 10 }
	###########################################################################
	http-request redirect scheme https unless { ssl_fc }
	default_backend vanessa

backend vanessa
	balance roundrobin
	# stick-table: key-value table. IPv4, store 1 million in table, expires in 10 minutes, storing http_rate value on table
	stick-table type ip size 1m expire 10m store http_req_rate(10s)
	########################################################################
	server node1 10.0.1.246:80 check
	server node2 10.0.1.38:80 check

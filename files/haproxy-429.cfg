global
	log 127.0.0.1	local2
	chroot /var/lib/haproxy
	stats socket :9999 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
	# Funciona como um período de carência. Ele define o tempo máximo que o cliente tem para se conectar a um servidor.
    timeout connect 5000
	# Tempo máximo que um cliente pode ficar inativo quando conectado ao servidor. Tempo padrão de 300s (5 min)
	# Se em modo tcp tem de ser o mesmo no client e no server
    timeout client  50000
	# Quando um cliente envia uma solicitação ao servidor, ele espera uma resposta. 
	#Se o servidor não responder no tempo configurado, um <timeout server> é invocado.
	# Retorna 504
    timeout server  50000
	## Slowloris attacks  ##
    # openssl s_client -connect vanessamello.click:443
	timeout http-request 5s
	# este é um tempo limite projetado para manter uma única conexão entre o cliente e o servidor “ativa” por um período de tempo desejado. 
	#Enquanto a conexão estiver ativa, todos os pacotes de dados podem passar sem a necessidade de solicitar uma conexão novamente.
	timeout http-keep-alive 2s
	# timeout queue limita o número de conexões simultâneas, o que também pode afetar o desempenho. 
	# Definir o tempo limite da fila reduz os tempos de espera limitando as conexões e permitindo que os clientes tentem 
	# se conectar novamente se a fila estiver cheia. Isso é semelhante a <timeout connect>, exceto que <timeout queue> limita o número de conexões. Se você não definir a <timeout queue>, o HAProxy usará como padrão as configurações de <timeout connect> para gerenciar a fila.
	timeout queue 5s
	# Digamos que uma conexão cai no meio de uma solicitação de cliente, se você observar os logs do HAProxy, provavelmente verá que a conexão 
	#perdida é resultado de problemas de rede do lado do cliente. Para lidar com esses tipos de situações, o HAProxy cria uma lista de conexões 
	#do lado do cliente descartadas. O <timeout client-fin> limita a quantidade de tempo que uma solicitação de cliente será mantida nesta lista. 
	#Este parâmetro começa a marcar quando uma conexão se junta à lista. Sem ele, o servidor manterá um tipo de conexão “talvez eles retornem”, 
	#enquanto outros têm o serviço negado. Para otimizar o desempenho, os valores de tempo definidos para esse tempo limite geralmente são curtos.	
	timeout client-fin 1s
	# Assim como o conceito <timeout client-fin>, desconexões abruptas também podem ocorrer no lado do servidor do aplicativo. Uma configuração ideal inclui 
	#servidores redundantes para balanceamento de carga. Quando um servidor tem muitas solicitações, a redundância permite redirecionar overflow requests
	#para servidores menos ocupados e acelerar os tempos de resposta. O <timeout server-fin> limita o tempo que o cliente espera por uma resposta do servidor 
	#antes que um servidor alternativo seja consultado
	timeout server-fin 1s	
	#########################
	# Habilita a espera de todo o corpo da solicitação HTTP antes de continuar
	option http-buffer-request
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 429 /etc/haproxy/errors/429.http	
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend server
    mode http
	bind :80
	bind :443 ssl crt /etc/haproxy/certs/
	stats enable
    stats uri /stats
    stats refresh 10s
	#### Tracking a client by adding an http-request track-sc0 directive #####
	http-request track-sc0 src table vanessa
	# 10 requests per second, cap requests at 10 per second, set the limit to 100.
	# http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }
	# Diminuir quantidade para testes 
	# for i in {0..30}; do  curl  -s -o /dev/null  -w "%{http_code}\n" "https://vanessamello.click" | ts ; done
	http-request deny deny_status 429 if { sc_http_req_rate(0) gt 10 }
	###########################################################################
	http-request redirect scheme https unless { ssl_fc }
	default_backend vanessa

backend vanessa
	balance roundrobin
	# stick-table: key-value table. IPv4, store 1 million in table, expires in 10 minutes, storing http_rate value on table
	stick-table type ip size 1m expire 10m store http_req_rate(60s)
	########################################################################
	server node1 apache-kong:80 check
	

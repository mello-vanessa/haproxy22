global
   daemon
   chroot /var/lib/haproxy
   log 127.0.0.1 local2
   maxconn 64000
   # Lower values allow more
   #sessions to coexist in the same amount of RAM, and higher values allow some
   #applications with very large cookies to work
   tune.bufsize 128000
   # número de processos por daemon, se aumenta, desabilita as threads, recomendado = 1
   nbproc 1
   # default "nbthread" value is automatically set to
   # the number of CPUs
   nbthread 8
   # The prefix "auto:" can be added before the process set to let HAProxy
   #automatically bind a process or a thread to a CPU by incrementing
   #process/thread and CPU sets.
   cpu-map auto:1/1-8 0-7
   stats socket /run/haproxy/admin-green.sock mode 666 level user
   stats timeout 30s
   user haproxy
   group haproxy

   # SSL Settings
   ca-base /etc/haproxy/certs/
   crt-base etc/haproxy/certs/
   # Sets the maximum size of the Diffie-Hellman parameters used for generating
   #the ephemeral/temporary Diffie-Hellman key in case of DHE key exchange
   tune.ssl.default-dh-param 2048
   ssl-default-bind-options no-sslv3 no-tls-tickets
   ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA

defaults
   log global
   mode http
   option httplog
   option dontlognull
   # number of retries to perform on a server after a connection failure
   retries 2
   timeout connect 5000
   timeout client 50000
   timeout server 50000
   ## Slowloris attacks  ##
   # openssl s_client -connect vanessamello.click:443
   timeout http-request 5s
	option http-buffer-request
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 429 /etc/haproxy/errors/429.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http
#
# FRONTENDS
#
# create a status URI in /healthcheck that will return
# a 200 is backend is healthy, and 503 if it isn't. This
# URI is queried by the ELB.
######################################################################
frontend health-green
   bind *:8665
   # nbsrv Takes an input value of type string, interprets it as a backend name and
   # returns the number of usable servers in that backend.
   acl backend_dead nbsrv(www-backend-green) lt 1
   monitor-uri /healthcheck
   monitor fail if backend_dead
#
# Frontend for plain http traffic
######################################################################
frontend www-http-green
   # options
   # Sets the maximum per-process number of concurrent connections to <number>.
   maxconn 40000
   bind *:80
   http-request add-header X-Forwarded-Proto http 
   option http-server-close
   option forwardfor

   # or send to
   default_backend www-backend-green
#
# Frontend which terminates ssl and proxys raw http2 traffic
######################################################################
frontend www-h2-https-green
   # options
   mode http
   # Enable the sending of TCP keepalive packets on both sides
   option tcpka
   option tcplog
   maxconn 40000
   bind *:443 accept-proxy
   stats enable
   stats uri /stats
   stats refresh 10s
   # reqadd X-Forwarded-Proto:\ http DEPRECATED
   #http-request add-header X-Forwarded-Proto https if { ssl_fcc }
   http-request add-header X-Forwarded-Proto http
	#### Tracking a client by adding an http-request track-sc0 directive #####
	http-request track-sc0 src table www-h2-backend-green
	# 10 requests per second, cap requests at 10 per second, set the limit to 100.
	# http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }
	# Diminuir quantidade para testes
	http-request deny deny_status 429 if { sc_http_req_rate(0) gt 10 }
	###########################################################################
	http-request redirect scheme https unless { ssl_fc }
   # send to http2 backend if speaks alpn
   use_backend www-h2-backend-green if { ssl_fc_alpn -i h2 }
   # or send to default backend
   default_backend www-backend-green
#
# LOCAL BACKENDS
######################################################################
backend www-backend-green
   fullconn 10000
   # redirect if is not via https
   redirect scheme https code 301 if !{ ssl_fc }
   server cache1 10.0.1.246:80 check minconn 1000 maxconn 8000 send-proxy
   server cache2 10.0.1.38:80 check minconn 1000 maxconn 8000 send-proxy
######################################################################
backend www-h2-backend-green
   mode http
   fullconn 20000
   # SÓ FUNCIONA UMA STICK-TABLE
   stick-table type ip size 1m expire 10m store http_req_rate(60s)
   # maximum SSL session ID length is 32 bytes.
   stick-table type binary len 32 size 30k expire 30m
   acl clienthello req_ssl_hello_type 1
   acl serverhello rep_ssl_hello_type 2
   # use tcp content accepts to detects ssl client and server hello.
   tcp-request inspect-delay 5s
   tcp-request content accept if clienthello
   # no timeout on response inspect delay by default.
   tcp-response content accept if serverhello
   # SSL session ID (SSLID) may be present on a client or server hello.
   # Its length is coded on 1 byte at offset 43 and its value starts
   # at offset 44.
   # Match and learn on request if client hello.
   stick on payload_lv(43,1) if clienthello
   # learn on response if server hello.
   stick store-response payload_lv(43,1) if serverhello
   server cache1 10.0.1.246:80 check minconn 1000 maxconn 8000 send-proxy
   server cache2 10.0.1.38:80 check minconn 1000 maxconn 8000 send-proxy